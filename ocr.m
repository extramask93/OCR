setdemorandstream(pi);
T=[    1 1 1 1 1 ...
       1 0 0 0 0 ...
       1 0 0 0 0 ...
       1 1 1 1 1 ...
       1 0 0 0 0 ...
       1 0 0 0 0 ...
       1 0 0 0 0; ...
       0 0 0 0 0 ...
       0 0 0 0 0 ...
       1 1 1 1 1 ...
       0 0 0 1 0 ...
       0 0 1 0 0 ...
       0 1 0 0 0 ...
       1 1 1 1 1; ...
       1 1 1 1 1 ...
       0 0 0 0 1 ...
       0 0 0 0 1 ...
       1 1 1 1 1 ...
       0 0 0 0 1 ...
       0 0 0 0 1 ...
       1 1 1 1 1; ...
       
    ]';
%corresponding to T members codes in 'made up' 3-bit coding(ASCII wanna be)
T_c=[0 0 0;0 0 1; 0 1 0]';
%%
input=[T(:,1)'; ...
       %%---------- F_damaged1
       1 1 1 1 1 ...
       1 0 0 0 0 ...
       1 0 0 0 0 ...
       1 1 1 0 0 ...
       1 0 0 0 0 ...
       1 0 0 0 0 ...
       1 0 0 0 0; ...
       %%---------F_damaged2
       1 1 1 1 1 ...
       0 0 0 0 0 ...
       1 0 0 0 0 ...
       1 1 1 1 1 ...
       1 0 0 1 0 ...
       1 0 0 0 0 ...
       1 0 0 0 0;
       %%---------z
       T(:,2)'; ...
       %%----------z_damaged1
       0 0 0 0 0 ...
       0 0 0 0 0 ...
       1 1 1 1 1 ...
       0 0 0 1 0 ...
       0 0 0 0 0 ...
       0 1 0 0 0 ...
       1 1 1 1 1;
       %%--------z_damaged2
       0 0 0 0 0 ...
       0 0 0 0 0 ...
       1 1 1 1 1 ...
       0 0 0 1 0 ...
       0 0 1 0 0 ...
       0 1 0 0 0 ...
       1 1 0 0 1
       %% ----------
       T(:,3)'; ...
       %%----------3_damaged1
       1 1 1 1 1 ...
       0 0 0 0 1 ...
       0 0 0 0 1 ...
       1 1 1 0 1 ...
       0 0 0 0 1 ...
       0 0 0 0 0 ...
       0 1 1 1 1;
       %%-----3_damaged2
       1 1 0 0 1 ...
       0 0 0 0 1 ...
       0 0 0 0 1 ...
       1 1 1 1 1 ...
       0 0 0 0 1 ...
       0 0 0 0 1 ...
       1 1 1 1 1]'; 
   target=[0 0 0;0 0 0;0 0 0;0 0 1;0 0 1;0 0 1;0 1 0;0 1 0;0 1 0]';
   setdemorandstream(pi);
    netff = feedforwardnet(19);%% mean value of input and output neurons
    netff.layers{1}.transferFcn = 'logsig';
    netff.layers{2}.transferFcn = 'tansig';
    netff = train(netff,input,target);
    view(netff)
    output_ff = netff(input);% same as simulate
    
    disp(output_ff');
    
%     noiseLevels = 0:.05:1;
%     numLevels = length(noiseLevels);
%     percError1 = zeros(1,numLevels);
%     for i = 1:numLevels
%         Xtest = min(max(repmat(X,1,numNoise)+randn(35,26*numNoise)*noiseLevels(i),0),1);
%         netff(Xtest)
%     end
%   Xtest = min(max(repmat(X,1,numNoise)+randn(35,26*numNoise)*noiseLevels(i),0),1);
    %%zad dom
    %problem(ocr) - opsiaæ, siatka 7x5, wyniki treningu ff; porownac z
    %siecia hopfielda //newhop()
    %%
    neth= newhop(T);
    for j=1:9
    test=input(:,j);
    [Y,a,b]=sim(neth,{1 1},{},test);
    closest=(sum(abs(Y{1}-T(:,1)))/35)*100;% just setting initial closest to 0 vec
    weGot=T_c(:,1);% and corresponding 7x5 model matrix
    for i=1:3
        foo=(sum(abs(Y{1}-T(:,i)))/35)*100;
        if foo<closest
            weGot=T_c(:,i)';
            closest=foo;
        end
    end
   fprintf('B³¹d = %.2f%%\nKod:',closest);
   disp(weGot');
   end